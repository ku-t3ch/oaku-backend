generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  CAMPUS_ADMIN
  SUPER_ADMIN
}

enum Position {
  HEAD
  MEMBER
  NON_POSITION
}

enum ComplianceStandard {
  KNOWLEDGE
  SKILLS
  ETHICS
  PERSONAL_CHARACTERISTICS
}

enum KasetsartStudentIdentity {
  INTEGRITY
  DETERMINATION
  KNOWLEDGE_CREATION
  UNITY
}

enum SDG {
  SDG1
  SDG2
  SDG3
  SDG4
  SDG5
  SDG6
  SDG7
  SDG8
  SDG9
  SDG10
  SDG11
  SDG12
  SDG13
  SDG14
  SDG15
  SDG16
  SDG17
}

model Campus {
  id                String             @id @default(uuid())
  name              String
  organizations     Organization[]
  organizationTypes OrganizationType[]
  projects          Project[]
  users             User[]
  userRoles         UserRole[]         // ✅ เพิ่มบรรทัดนี้
}

model OrganizationType {
  id            String         @id @default(uuid())
  name          String
  campusId      String
  campus        Campus         @relation(fields: [campusId], references: [id])
  organizations Organization[]
}

model Organization {
  id                   String             @id @default(uuid())
  publicOrganizationId String             @unique //AdminCampus input for organization creation
  nameEn               String
  nameTh               String
  image                String
  details              String
  socialMedia          Json? //[{ "platform": "Facebook", "url": "https://facebook.com/organization" ,platform: "Instagram", "url": "https://instagram.com/organization" }]
  email                String             @unique
  phoneNumber          String?
  createdAt            DateTime           @default(now())
  campusId             String
  organizationTypeId   String
  campus               Campus             @relation(fields: [campusId], references: [id])
  organizationType     OrganizationType   @relation(fields: [organizationTypeId], references: [id])
  userOrganizations    UserOrganization[] // เปลี่ยนจาก users
  projects             Project[]
}

model User {
  id                String             @id @default(uuid())
  userId            String             @unique
  name              String
  email             String             @unique
  phoneNumber       String?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isSuspended       Boolean            @default(false)
  campusId          String
  campus            Campus             @relation(fields: [campusId], references: [id])
  activities        ActivityHour[]
  userOrganizations UserOrganization[] // ✅ สำหรับ USER roles
  userRoles         UserRole[]         // ✅ สำหรับ ADMIN roles
  log               Log[]
}

model Project {
  id                          String                     @id @default(uuid())
  publicProjectId             String                     @unique @default(uuid())
  activityCode                String                     @unique
  nameEn                      String
  nameTh                      String
  dateStart                   DateTime
  dateEnd                     DateTime
  targetUser                  Json // [{"staff":20 }, {"student":50}]
  participants                Json? // [{"staff":10 }, {"student":10}]
  schedule                    Json? // [{"location": "somewhere", "eachDay":[{date:"2023-01-01",description:"description",timeline:[{timeStart:"08:00", timeEnd:"10:00",description:"description"}]}]}]
  principlesAndReasoning      String?
  budgetUsed                  Int?
  objectives                  String?
  activityFormat              String[]
  expectedProjectOutcome      String[]
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @updatedAt
  location                    Json? //{"location":somewhere,outside:[] or outside:[{postcode:"12345", address:"somewhere",city:"Bangkok", province:"Bangkok"}]}
  organizationId              String
  campusId                    String
  organization                Organization               @relation(fields: [organizationId], references: [id])
  campus                      Campus                     @relation(fields: [campusId], references: [id])
  activities                  ActivityHour[]
  complianceStandards         ComplianceStandard[]
  kasetsartStudentIdentities  KasetsartStudentIdentity[]
  sustainableDevelopmentGoals SDG[]
  activityHours               Json?
}

model ActivityHour {
  id                String   @id @default(uuid())
  isCompleted       Boolean  @default(false)
  fileNamePrinciple String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  projectId         String
  userId            String
  project           Project  @relation(fields: [projectId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  action    String
  message   String?
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  role      Role     // ADMIN, CAMPUS_ADMIN, SUPER_ADMIN
  campusId  String?  // สำหรับ CAMPUS_ADMIN
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  campus Campus? @relation(fields: [campusId], references: [id])

  @@unique([userId, role, campusId]) // ป้องกันการมี role เดียวกันซ้ำ
}

model UserOrganization {
  id                 String   @id @default(uuid())
  userId             String
  organizationId     String
  userIdCode         String
  organizationIdCode String
  role               Role     @default(USER) // ✅ จะเป็น USER เสมอ
  position           Position // HEAD หรือ MEMBER
  joinedAt           DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId]) // ป้องกันการ join org เดียวกันซ้ำ
}
